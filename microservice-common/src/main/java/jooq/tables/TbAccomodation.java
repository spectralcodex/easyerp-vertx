/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.TbAccomodationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbAccomodation extends TableImpl<TbAccomodationRecord> {

    private static final long serialVersionUID = 1794228590;

    /**
     * The reference instance of <code>public.tb_accomodation</code>
     */
    public static final TbAccomodation TB_ACCOMODATION = new TbAccomodation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbAccomodationRecord> getRecordType() {
        return TbAccomodationRecord.class;
    }

    /**
     * The column <code>public.tb_accomodation.id</code>.
     */
    public final TableField<TbAccomodationRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("nextval('tb_accomodation_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.tb_accomodation.serialNumber</code>.
     */
    public final TableField<TbAccomodationRecord, String> SERIALNUMBER = createField(DSL.name("serialNumber"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.tb_accomodation.name</code>.
     */
    public final TableField<TbAccomodationRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tb_accomodation.abbrevation</code>.
     */
    public final TableField<TbAccomodationRecord, String> ABBREVATION = createField(DSL.name("abbrevation"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.tb_accomodation.units</code>.
     */
    public final TableField<TbAccomodationRecord, String> UNITS = createField(DSL.name("units"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tb_accomodation.dormBedsPerRoom</code>.
     */
    public final TableField<TbAccomodationRecord, Integer> DORMBEDSPERROOM = createField(DSL.name("dormBedsPerRoom"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tb_accomodation.totalAccomodation</code>.
     */
    public final TableField<TbAccomodationRecord, Integer> TOTALACCOMODATION = createField(DSL.name("totalAccomodation"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tb_accomodation.createdOn</code>.
     */
    public final TableField<TbAccomodationRecord, OffsetDateTime> CREATEDON = createField(DSL.name("createdOn"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.tb_accomodation.createdBy</code>.
     */
    public final TableField<TbAccomodationRecord, String> CREATEDBY = createField(DSL.name("createdBy"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.tb_accomodation</code> table reference
     */
    public TbAccomodation() {
        this(DSL.name("tb_accomodation"), null);
    }

    /**
     * Create an aliased <code>public.tb_accomodation</code> table reference
     */
    public TbAccomodation(String alias) {
        this(DSL.name(alias), TB_ACCOMODATION);
    }

    /**
     * Create an aliased <code>public.tb_accomodation</code> table reference
     */
    public TbAccomodation(Name alias) {
        this(alias, TB_ACCOMODATION);
    }

    private TbAccomodation(Name alias, Table<TbAccomodationRecord> aliased) {
        this(alias, aliased, null);
    }

    private TbAccomodation(Name alias, Table<TbAccomodationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TbAccomodation(Table<O> child, ForeignKey<O, TbAccomodationRecord> key) {
        super(child, key, TB_ACCOMODATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<TbAccomodationRecord, Long> getIdentity() {
        return Keys.IDENTITY_TB_ACCOMODATION;
    }

    @Override
    public UniqueKey<TbAccomodationRecord> getPrimaryKey() {
        return Keys.TB_ACCOMODATION_PKEY;
    }

    @Override
    public List<UniqueKey<TbAccomodationRecord>> getKeys() {
        return Arrays.<UniqueKey<TbAccomodationRecord>>asList(Keys.TB_ACCOMODATION_PKEY);
    }

    @Override
    public TbAccomodation as(String alias) {
        return new TbAccomodation(DSL.name(alias), this);
    }

    @Override
    public TbAccomodation as(Name alias) {
        return new TbAccomodation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TbAccomodation rename(String name) {
        return new TbAccomodation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbAccomodation rename(Name name) {
        return new TbAccomodation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, String, String, Integer, Integer, OffsetDateTime, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
