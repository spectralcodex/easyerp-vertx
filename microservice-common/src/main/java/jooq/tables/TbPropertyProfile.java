/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.TbPropertyProfileRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbPropertyProfile extends TableImpl<TbPropertyProfileRecord> {

    private static final long serialVersionUID = 718493141;

    /**
     * The reference instance of <code>public.tb_property_profile</code>
     */
    public static final TbPropertyProfile TB_PROPERTY_PROFILE = new TbPropertyProfile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbPropertyProfileRecord> getRecordType() {
        return TbPropertyProfileRecord.class;
    }

    /**
     * The column <code>public.tb_property_profile.id</code>.
     */
    public final TableField<TbPropertyProfileRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("nextval('tb_property_profile_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.tb_property_profile.serialNumber</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> SERIALNUMBER = createField(DSL.name("serialNumber"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.tb_property_profile.type</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tb_property_profile.description</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tb_property_profile.image</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> IMAGE = createField(DSL.name("image"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tb_property_profile.name</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tb_property_profile.phone</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> PHONE = createField(DSL.name("phone"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.tb_property_profile.email</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tb_property_profile.website</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> WEBSITE = createField(DSL.name("website"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tb_property_profile.ownerFirstName</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> OWNERFIRSTNAME = createField(DSL.name("ownerFirstName"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tb_property_profile.ownerLastName</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> OWNERLASTNAME = createField(DSL.name("ownerLastName"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tb_property_profile.country</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> COUNTRY = createField(DSL.name("country"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tb_property_profile.address1</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> ADDRESS1 = createField(DSL.name("address1"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tb_property_profile.address2</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> ADDRESS2 = createField(DSL.name("address2"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tb_property_profile.city</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tb_property_profile.postalCode</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> POSTALCODE = createField(DSL.name("postalCode"), org.jooq.impl.SQLDataType.VARCHAR(6), this, "");

    /**
     * The column <code>public.tb_property_profile.locationCoordinate</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> LOCATIONCOORDINATE = createField(DSL.name("locationCoordinate"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tb_property_profile.createdOn</code>.
     */
    public final TableField<TbPropertyProfileRecord, LocalDateTime> CREATEDON = createField(DSL.name("createdOn"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tb_property_profile.createdBy</code>.
     */
    public final TableField<TbPropertyProfileRecord, String> CREATEDBY = createField(DSL.name("createdBy"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.tb_property_profile</code> table reference
     */
    public TbPropertyProfile() {
        this(DSL.name("tb_property_profile"), null);
    }

    /**
     * Create an aliased <code>public.tb_property_profile</code> table reference
     */
    public TbPropertyProfile(String alias) {
        this(DSL.name(alias), TB_PROPERTY_PROFILE);
    }

    /**
     * Create an aliased <code>public.tb_property_profile</code> table reference
     */
    public TbPropertyProfile(Name alias) {
        this(alias, TB_PROPERTY_PROFILE);
    }

    private TbPropertyProfile(Name alias, Table<TbPropertyProfileRecord> aliased) {
        this(alias, aliased, null);
    }

    private TbPropertyProfile(Name alias, Table<TbPropertyProfileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TbPropertyProfile(Table<O> child, ForeignKey<O, TbPropertyProfileRecord> key) {
        super(child, key, TB_PROPERTY_PROFILE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<TbPropertyProfileRecord, Long> getIdentity() {
        return Keys.IDENTITY_TB_PROPERTY_PROFILE;
    }

    @Override
    public UniqueKey<TbPropertyProfileRecord> getPrimaryKey() {
        return Keys.TB_PROPERTY_PROFILE_PKEY;
    }

    @Override
    public List<UniqueKey<TbPropertyProfileRecord>> getKeys() {
        return Arrays.<UniqueKey<TbPropertyProfileRecord>>asList(Keys.TB_PROPERTY_PROFILE_PKEY);
    }

    @Override
    public TbPropertyProfile as(String alias) {
        return new TbPropertyProfile(DSL.name(alias), this);
    }

    @Override
    public TbPropertyProfile as(Name alias) {
        return new TbPropertyProfile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TbPropertyProfile rename(String name) {
        return new TbPropertyProfile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbPropertyProfile rename(Name name) {
        return new TbPropertyProfile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Long, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, LocalDateTime, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
