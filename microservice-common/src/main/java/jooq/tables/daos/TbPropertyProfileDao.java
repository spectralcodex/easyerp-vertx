/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.async.AbstractAsyncVertxDAO;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import jooq.tables.TbPropertyProfile;
import jooq.tables.records.TbPropertyProfileRecord;

import org.jooq.Configuration;


import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.async.AsyncClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbPropertyProfileDao extends AbstractAsyncVertxDAO<TbPropertyProfileRecord, jooq.tables.pojos.TbPropertyProfile, Long, Future<List<jooq.tables.pojos.TbPropertyProfile>>, Future<jooq.tables.pojos.TbPropertyProfile>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<TbPropertyProfileRecord,jooq.tables.pojos.TbPropertyProfile,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public TbPropertyProfileDao(Configuration configuration, io.vertx.ext.asyncsql.AsyncSQLClient delegate) {
        super(TbPropertyProfile.TB_PROPERTY_PROFILE, jooq.tables.pojos.TbPropertyProfile.class, new AsyncClassicQueryExecutor<TbPropertyProfileRecord,jooq.tables.pojos.TbPropertyProfile,Long>(configuration,delegate,jooq.tables.pojos.TbPropertyProfile::new, TbPropertyProfile.TB_PROPERTY_PROFILE));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(jooq.tables.pojos.TbPropertyProfile object) {
        return object.getId();
    }

    /**
     * Find records that have <code>serialNumber IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyBySerialnumber(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.SERIALNUMBER.in(values));
    }

    /**
     * Find records that have <code>type IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByType(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.TYPE.in(values));
    }

    /**
     * Find records that have <code>description IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByDescription(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.DESCRIPTION.in(values));
    }

    /**
     * Find records that have <code>image IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByImage(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.IMAGE.in(values));
    }

    /**
     * Find records that have <code>name IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByName(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.NAME.in(values));
    }

    /**
     * Find records that have <code>phone IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByPhone(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.PHONE.in(values));
    }

    /**
     * Find records that have <code>email IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByEmail(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.EMAIL.in(values));
    }

    /**
     * Find records that have <code>website IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByWebsite(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.WEBSITE.in(values));
    }

    /**
     * Find records that have <code>ownerFirstName IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByOwnerfirstname(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.OWNERFIRSTNAME.in(values));
    }

    /**
     * Find records that have <code>ownerLastName IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByOwnerlastname(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.OWNERLASTNAME.in(values));
    }

    /**
     * Find records that have <code>country IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByCountry(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.COUNTRY.in(values));
    }

    /**
     * Find records that have <code>address1 IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByAddress1(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.ADDRESS1.in(values));
    }

    /**
     * Find records that have <code>address2 IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByAddress2(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.ADDRESS2.in(values));
    }

    /**
     * Find records that have <code>city IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByCity(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.CITY.in(values));
    }

    /**
     * Find records that have <code>postalCode IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByPostalcode(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.POSTALCODE.in(values));
    }

    /**
     * Find records that have <code>locationCoordinate IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByLocationcoordinate(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.LOCATIONCOORDINATE.in(values));
    }

    /**
     * Find records that have <code>createdOn IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByCreatedon(List<Timestamp> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.CREATEDON.in(values));
    }

    /**
     * Find records that have <code>createdBy IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByCreatedby(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.CREATEDBY.in(values));
    }

    /**
     * Find records that have <code>profileCode IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbPropertyProfile>> findManyByProfilecode(List<String> values) {
        return findManyByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.PROFILECODE.in(values));
    }

    /**
     * Find a unique record that has <code>profileCode = value</code> asynchronously
     */
    public Future<jooq.tables.pojos.TbPropertyProfile> findOneByProfilecode(String value) {
        return findOneByCondition(TbPropertyProfile.TB_PROPERTY_PROFILE.PROFILECODE.eq(value));
    }

    @Override
    public AsyncClassicQueryExecutor<TbPropertyProfileRecord,jooq.tables.pojos.TbPropertyProfile,Long> queryExecutor(){
        return (AsyncClassicQueryExecutor<TbPropertyProfileRecord,jooq.tables.pojos.TbPropertyProfile,Long>) super.queryExecutor();
    }

    @Override
    protected java.util.function.Function<Object,Long> keyConverter(){
        return lastId -> Long.valueOf(((io.vertx.core.json.JsonArray)lastId).getLong(0).longValue());
    }
}
