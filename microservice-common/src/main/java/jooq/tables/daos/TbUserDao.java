/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.async.AbstractAsyncVertxDAO;

import java.time.OffsetDateTime;
import java.util.List;

import javax.annotation.Generated;

import jooq.tables.TbUser;
import jooq.tables.records.TbUserRecord;

import org.jooq.Configuration;


import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.async.AsyncClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbUserDao extends AbstractAsyncVertxDAO<TbUserRecord, jooq.tables.pojos.TbUser, Long, Future<List<jooq.tables.pojos.TbUser>>, Future<jooq.tables.pojos.TbUser>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<TbUserRecord,jooq.tables.pojos.TbUser,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public TbUserDao(Configuration configuration, io.vertx.ext.asyncsql.AsyncSQLClient delegate) {
        super(TbUser.TB_USER, jooq.tables.pojos.TbUser.class, new AsyncClassicQueryExecutor<TbUserRecord,jooq.tables.pojos.TbUser,Long>(configuration,delegate,jooq.tables.pojos.TbUser::new, TbUser.TB_USER));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(jooq.tables.pojos.TbUser object) {
        return object.getId();
    }

    /**
     * Find records that have <code>roleId IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByRoleid(List<String> values) {
        return findManyByCondition(TbUser.TB_USER.ROLEID.in(values));
    }

    /**
     * Find records that have <code>firstName IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByFirstname(List<String> values) {
        return findManyByCondition(TbUser.TB_USER.FIRSTNAME.in(values));
    }

    /**
     * Find records that have <code>lastName IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByLastname(List<String> values) {
        return findManyByCondition(TbUser.TB_USER.LASTNAME.in(values));
    }

    /**
     * Find records that have <code>email IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByEmail(List<String> values) {
        return findManyByCondition(TbUser.TB_USER.EMAIL.in(values));
    }

    /**
     * Find records that have <code>mobile IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByMobile(List<String> values) {
        return findManyByCondition(TbUser.TB_USER.MOBILE.in(values));
    }

    /**
     * Find records that have <code>hashedPassword IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByHashedpassword(List<String> values) {
        return findManyByCondition(TbUser.TB_USER.HASHEDPASSWORD.in(values));
    }

    /**
     * Find records that have <code>passwordSalt IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByPasswordsalt(List<String> values) {
        return findManyByCondition(TbUser.TB_USER.PASSWORDSALT.in(values));
    }

    /**
     * Find records that have <code>companyCode IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByCompanycode(List<String> values) {
        return findManyByCondition(TbUser.TB_USER.COMPANYCODE.in(values));
    }

    /**
     * Find records that have <code>createdOn IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByCreatedon(List<OffsetDateTime> values) {
        return findManyByCondition(TbUser.TB_USER.CREATEDON.in(values));
    }

    /**
     * Find records that have <code>createdBy IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByCreatedby(List<String> values) {
        return findManyByCondition(TbUser.TB_USER.CREATEDBY.in(values));
    }

    @Override
    public AsyncClassicQueryExecutor<TbUserRecord,jooq.tables.pojos.TbUser,Long> queryExecutor(){
        return (AsyncClassicQueryExecutor<TbUserRecord,jooq.tables.pojos.TbUser,Long>) super.queryExecutor();
    }

    @Override
    protected java.util.function.Function<Object,Long> keyConverter(){
        return lastId -> Long.valueOf(((io.vertx.core.json.JsonArray)lastId).getLong(0).longValue());
    }
}
