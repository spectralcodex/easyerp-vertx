/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.async.AbstractAsyncVertxDAO;

import java.time.OffsetTime;
import java.util.Collection;

import javax.annotation.Generated;

import jooq.tables.TbUser;
import jooq.tables.records.TbUserRecord;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.async.AsyncClassicQueryExecutor;
/**
 * This table contains user login credentials and assigned user role
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbUserDao extends AbstractAsyncVertxDAO<TbUserRecord, jooq.tables.pojos.TbUser, Long, Future<List<jooq.tables.pojos.TbUser>>, Future<jooq.tables.pojos.TbUser>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<TbUserRecord, jooq.tables.pojos.TbUser,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public TbUserDao(Configuration configuration, io.vertx.ext.asyncsql.AsyncSQLClient delegate) {
        super(TbUser.TB_USER, jooq.tables.pojos.TbUser.class, new AsyncClassicQueryExecutor<TbUserRecord, jooq.tables.pojos.TbUser,Long>(configuration,delegate, jooq.tables.pojos.TbUser::new, TbUser.TB_USER));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(jooq.tables.pojos.TbUser object) {
        return object.getId();
    }

    /**
     * Find records that have <code>role_id IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByRoleId(Collection<Long> values) {
        return findManyByCondition(TbUser.TB_USER.ROLE_ID.in(values));
    }

    /**
     * Find records that have <code>first_name IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByFirstName(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.FIRST_NAME.in(values));
    }

    /**
     * Find records that have <code>last_name IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByLastName(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.LAST_NAME.in(values));
    }

    /**
     * Find records that have <code>email IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByEmail(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.EMAIL.in(values));
    }

    /**
     * Find records that have <code>mobile IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByMobile(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.MOBILE.in(values));
    }

    /**
     * Find records that have <code>secret IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyBySecret(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.SECRET.in(values));
    }

    /**
     * Find records that have <code>salt IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyBySalt(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.SALT.in(values));
    }

    /**
     * Find records that have <code>company_code IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByCompanyCode(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.COMPANY_CODE.in(values));
    }

    /**
     * Find records that have <code>created_on IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByCreatedOn(Collection<OffsetTime> values) {
        return findManyByCondition(TbUser.TB_USER.CREATED_ON.in(values));
    }

    /**
     * Find records that have <code>created_by IN (values)</code> asynchronously
     */
    public Future<List<jooq.tables.pojos.TbUser>> findManyByCreatedBy(Collection<String> values) {
        return findManyByCondition(TbUser.TB_USER.CREATED_BY.in(values));
    }

    /**
     * Find a unique record that has <code>email = value</code> asynchronously
     */
    public Future<jooq.tables.pojos.TbUser> findOneByEmail(String value) {
        return findOneByCondition(TbUser.TB_USER.EMAIL.eq(value));
    }

    /**
     * Find a unique record that has <code>mobile = value</code> asynchronously
     */
    public Future<jooq.tables.pojos.TbUser> findOneByMobile(String value) {
        return findOneByCondition(TbUser.TB_USER.MOBILE.eq(value));
    }

    @Override
    public AsyncClassicQueryExecutor<TbUserRecord, jooq.tables.pojos.TbUser,Long> queryExecutor(){
        return (AsyncClassicQueryExecutor<TbUserRecord, jooq.tables.pojos.TbUser,Long>) super.queryExecutor();
    }

    @Override
    protected java.util.function.Function<Object,Long> keyConverter(){
        return lastId -> Long.valueOf(((io.vertx.core.json.JsonArray)lastId).getLong(0).longValue());
    }
}
